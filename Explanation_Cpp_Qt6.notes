______
C++20 \_________________________________________________________________________

Q> Create an example of an MVVM architecture implemented in C++20 QML and Qt6,
where the model is a simulated EKG of a human heart beat. Use QWT for plotting
the graphs. The view controller allows scrolling and zooming of the rendered
plot and provides a way to measure the heart rate found in the data sample.

A> Certainly! Implementing an MVVM (Model-View-ViewModel) architecture for an
EKG simulation in C++20 with QML and Qt6, including QWT for plotting, involves
a few key components. Below is a simplified example to illustrate how you might
structure such an application.

1. Model

The Model represents the EKG data. For simplicity, we'll simulate some EKG
data.

// ekgmodel.h
#ifndef EKGMODEL_H
#define EKGMODEL_H

#include <QAbstractListModel>
#include <vector>

class EKGModel : public QAbstractListModel
{
    Q_OBJECT
public:
    explicit EKGModel(QObject *parent = nullptr);

    enum Roles {
        ValueRole = Qt::UserRole + 1
    };

    int rowCount(const QModelIndex &parent = QModelIndex()) const override;
    QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const override;
    QHash<int, QByteArray> roleNames() const override;

    void generateData(int points);
    const std::vector<double>& getData() const;

private:
    std::vector<double> m_data;
};

#endif // EKGMODEL_H

// ekgmodel.cpp
#include "ekgmodel.h"
#include <QRandomGenerator>

EKGModel::EKGModel(QObject *parent)
    : QAbstractListModel(parent)
{
    generateData(1000); // Generate initial data
}

int EKGModel::rowCount(const QModelIndex &parent) const
{
    Q_UNUSED(parent);
    return m_data.size();
}

QVariant EKGModel::data(const QModelIndex &index, int role) const
{
    if (!index.isValid() || index.row() >= m_data.size())
        return QVariant();

    if (role == ValueRole)
        return m_data[index.row()];

    return QVariant();
}

QHash<int, QByteArray> EKGModel::roleNames() const
{
    QHash<int, QByteArray> roles;
    roles[ValueRole] = "value";
    return roles;
}

void EKGModel::generateData(int points)
{
    m_data.clear();
    m_data.reserve(points);
    auto rng = QRandomGenerator::global();
    for (int i = 0; i < points; ++i)
    {
        m_data.push_back(rng->bounded(0.0, 1.0));
    }
    emit dataChanged(index(0), index(m_data.size() - 1));
}

const std::vector<double>& EKGModel::getData() const
{
    return m_data;
}

2. ViewModel

The ViewModel provides data for the view and handles interaction logic.

// ekgviewmodel.h
#ifndef EKGVIEWMODEL_H
#define EKGVIEWMODEL_H

#include <QObject>
#include "ekgmodel.h"

class EKGViewModel : public QObject
{
    Q_OBJECT
    Q_PROPERTY(EKGModel* model READ model WRITE setModel NOTIFY modelChanged)
    Q_PROPERTY(double heartRate READ heartRate NOTIFY heartRateChanged)

public:
    explicit EKGViewModel(QObject *parent = nullptr);

    EKGModel* model() const;
    void setModel(EKGModel* model);

    double heartRate() const;

public slots:
    void calculateHeartRate();

signals:
    void modelChanged();
    void heartRateChanged();

private:
    EKGModel* m_model;
    double m_heartRate;
};

#endif // EKGVIEWMODEL_H

// ekgviewmodel.cpp
#include "ekgviewmodel.h"
#include <QDateTime>

EKGViewModel::EKGViewModel(QObject *parent)
    : QObject(parent), m_model(nullptr), m_heartRate(0.0)
{
}

EKGModel* EKGViewModel::model() const
{
    return m_model;
}

void EKGViewModel::setModel(EKGModel* model)
{
    if (m_model != model)
    {
        m_model = model;
        emit modelChanged();
        calculateHeartRate();
    }
}

double EKGViewModel::heartRate() const
{
    return m_heartRate;
}

void EKGViewModel::calculateHeartRate()
{
    if (!m_model)
        return;

    // Simple heart rate calculation based on EKG data
    // Assuming EKG data has peaks every second for simplicity
    int peakCount = 0;
    for (size_t i = 1; i < m_model->getData().size(); ++i)
    {
        if (m_model->getData()[i] > 0.8 && m_model->getData()[i-1] <= 0.8)
        {
            ++peakCount;
        }
    }

    m_heartRate = peakCount * 60.0 / 10; // Assuming 10 seconds of data
    emit heartRateChanged();
}

3. View (QML)

The QML file defines how the data is presented and interacted with.

// Main.qml
import QtQuick 6.0
import QtQuick.Controls 6.0
import Qwt 1.0

ApplicationWindow {
    visible: true
    width: 800
    height: 600
    title: "EKG Simulation"

    EKGViewModel {
        id: viewModel
        model: ekgModel
    }

    EKGModel {
        id: ekgModel
    }

    QwtPlot {
        id: plot
        anchors.fill: parent
        title: "EKG Plot"
        legendVisible: true

        QwtPlotCurve {
            title: "EKG Signal"
            data: QwtData.fromModel(ekgModel)
            pen.color: "blue"
        }

        // Scroll and zoom functionality
        QwtPlotZoomer {
            canvas: plot.canvas
            zoomBase: 2.0
        }

        QwtPlotPanner {
            canvas: plot.canvas
        }

        // Heart rate display
        Text {
            anchors.bottom: parent.bottom
            anchors.horizontalCenter: parent.horizontalCenter
            text: "Heart Rate: " + viewModel.heartRate.toFixed(2) + " BPM"
            font.pointSize: 16
        }
    }
}

4. Main Application

The main application initializes and sets up the Model and ViewModel.

// main.cpp
#include <QApplication>
#include <QQmlApplicationEngine>
#include <QQmlContext>
#include "ekgmodel.h"
#include "ekgviewmodel.h"

int main(int argc, char *argv[])
{
    QApplication app(argc, argv);

    QQmlApplicationEngine engine;

    EKGModel model;
    EKGViewModel viewModel;

    viewModel.setModel(&model);

    engine.rootContext()->setContextProperty("viewModel", &viewModel);
    engine.rootContext()->setContextProperty("ekgModel", &model);

    engine.load(QUrl(QStringLiteral("qrc:/Main.qml")));
    if (engine.rootObjects().isEmpty())
        return -1;

    return app.exec();
}

Summary

- Model (EKGModel): Holds and provides EKG data.
- ViewModel (EKGViewModel): Contains business logic for calculating heart rate
  and exposes the model to the view.
- View (Main.qml): Defines the user interface using QML and integrates with QWT
  for plotting the EKG data.

Q> Why the roleNames defined as a QHash?

A> In Qt, the QHash<int, QByteArray> is used in conjunction with
QAbstractItemModel to define roles for data access in a model. This mechanism
allows views to request data in different roles, which can be particularly
useful for different types of display or interaction logic in the view.

Here's a detailed explanation of why roleNames is defined as a QHash<int,
QByteArray> and how it fits into the Model-View-Controller (MVC) and
Model-View-ViewModel (MVVM) paradigms:

Purpose of roleNames

1. Role Identification: Each role in the QAbstractItemModel is identified by an
   integer constant. These roles tell the model what type of data to return when
   requested. For example, a ValueRole might be used to get the value of a
   particular item, while another role might be used to get the itemâ€™s label.

2. Role Names: The roleNames function provides a mapping between these integer
   roles and human-readable names. This is particularly useful for debugging and
   for certain views that need to handle data in a more flexible or descriptive
   manner.

3. Flexibility: By defining roles and their names, you allow your model to
   provide various forms of data through different roles. This makes your model
   more flexible and easier to use with different types of views.

Example Usage

Here's a brief example demonstrating how roleNames works:

QHash<int, QByteArray> EKGModel::roleNames() const
{
    QHash<int, QByteArray> roles;
    roles[ValueRole] = "value";
    return roles;
}

In this roleNames function:

- ValueRole: This is an integer constant defined in the model class that acts
  as a key to access specific data from the model.

- "value": This is the human-readable name associated with ValueRole.

When a view, such as a QML component or a Qt widget, requests data from the
model using the ValueRole, it knows how to interpret the integer role because
it can look up the corresponding name using the roleNames function. This
mapping helps the view understand what kind of data it is dealing with and how
to display or process it.

How It Fits in MVVM

In the MVVM architecture:

- Model: Manages the data and defines roles for accessing it. The roleNames
  function ensures that different roles can be easily identified by their
  names, which is useful for both the ViewModel and View.

- ViewModel: Uses the model and its roles to prepare data for the view. The
  ViewModel does not directly deal with the roleNames but relies on the Model
  to provide the necessary data through roles.

- View: Interacts with the model via the ViewModel. It uses the role names to
  request specific pieces of data from the model. For instance, in QML, you
  might use QAbstractItemModel's role names to bind data to UI elements.

By mapping roles to names, the roleNames function provides a clear way to
access and interpret data in the model, making it easier to build complex,
data-driven UIs.

Summary

Defining roleNames as a QHash<int, QByteArray> in a QAbstractItemModel:

- Maps integer role identifiers to descriptive names.
- Enhances the flexibility and readability of data handling in views.
- Facilitates debugging and interaction between the model and the view by
  providing meaningful role names.

This mechanism aligns with the principles of the MVVM pattern by ensuring that
the view (and viewmodel) can access and display data effectively based on
well-defined roles.

Q> Create a CMake file for building this.

A> Certainly! Below is a CMakeLists.txt file tailored for building the example
provided. This CMake configuration assumes you have Qt6, QWT, and C++20
installed and configured in your environment. Adjust paths and library names as
needed based on your setup.
_______________
CMakeLists.txt \________________________________________________________________

cmake_minimum_required(VERSION 3.19)  # Required for CMake 3.19 or newer
project(EKGViewer VERSION 1.0 LANGUAGES CXX)

# Set C++20 standard
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Find Qt6
find_package(Qt6 REQUIRED COMPONENTS Core Gui Quick Qml)

# Find QWT
find_package(QWT REQUIRED)

# Define the sources
set(SOURCES
    main.cpp
    ekgmodel.cpp
    ekgviewmodel.cpp
)

# Define the header files
set(HEADERS
    ekgmodel.h
    ekgviewmodel.h
)

# Create the executable target
add_executable(EKGViewer
    ${SOURCES}
    ${HEADERS}
    qml.qrc  # QML resources file
)

# Link against Qt6 libraries
target_link_libraries(EKGViewer
    PRIVATE
    Qt6::Core
    Qt6::Gui
    Qt6::Quick
    Qt6::Qml
    QWT::QWT
)

# Include directories for Qt6 and QWT
target_include_directories(EKGViewer
    PRIVATE
    ${Qt6_INCLUDE_DIRS}
    ${QWT_INCLUDE_DIRS}
)

# Set up QML resources
qt_add_qml_module(EKGViewer
    URI EKGViewer
    VERSION 1.0
    QML_FILES
    Main.qml
)

# Set the RPATH to find Qt6 and QWT libraries at runtime
set_target_properties(EKGViewer PROPERTIES
    INSTALL_RPATH_USE_LINK_PATH TRUE
)

# Ensure QML modules are built
qt_add_resources(EKGViewer
    PREFIX
    "/"
    FILES
    qml.qrc
)

Explanation:

1. CMake Minimum Version: Ensure you're using CMake 3.19 or newer for better support of modern C++ features and Qt6.

2. Project and C++ Standard: Define the project and set the C++ standard to C++20.

3. Qt6 and QWT: Find the required Qt6 and QWT packages. Make sure these packages are installed and properly configured in your system.

4. Sources and Headers: Define the source and header files used in the project.

5. Executable Target: Create an executable target named EKGViewer from the sources.

6. Link Libraries: Link the executable against Qt6 and QWT libraries.

7. Include Directories: Set include directories for Qt6 and QWT.

8. QML Resources: Use qt_add_qml_module to add QML support. Ensure the Main.qml file is included.

9. RPATH: Set RPATH to ensure that the application can find the Qt6 and QWT libraries at runtime.

10. Resource Files: Add QML resource file handling.

Additional Steps:

1. QML Resources File: Create a qml.qrc file to include your QML files. Example content for 
________
qml.qrc \_______________________________________________________________________

<?xml version="1.0"?>
<RCC>
    <qresource prefix="/">
        <file>Main.qml"/>
    </qresource>
</RCC>

2. QWT Installation: Ensure that QWT is installed on your system. You may need to adjust the find_package(QWT REQUIRED) line if your QWT installation is not in the standard location.

3. Qt6 Installation: Make sure you have the correct Qt6 modules installed, and that they are properly configured in your system's CMake paths.

4. Build and Run: Use CMake to configure the build system and then compile the project:
_________
build.sh \______________________________________________________________________

mkdir build
cd build
cmake ..
cmake --build .
./EKGViewer

This CMake file should help you set up the build environment for your Qt6 and QML-based application with QWT integration. Adjust paths and settings according to your specific environment and requirements.
